#!/bin/bash

# Smart pre-push hook: Auto-encrypt secrets before push, then decrypt after
# This allows fast local commits while ensuring only encrypted secrets reach remote

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîí Smart pre-push: Auto-encrypting secrets...${NC}"

# Function to check if a file is encrypted with ansible-vault
is_vault_encrypted() {
    local file="$1"
    if [[ -f "$file" ]]; then
        if head -n 1 "$file" | grep -q '^\$ANSIBLE_VAULT'; then
            return 0  # File is encrypted
        else
            return 1  # File is not encrypted
        fi
    fi
    return 1  # File doesn't exist
}

# Function to encrypt vault files
encrypt_vault_files() {
    local encrypted_files=()
    
    # Find all .secrets files that need encryption
    for vault_file in .secrets/*.yml; do
        if [[ -f "$vault_file" ]] && [[ "$vault_file" != *.template ]]; then
            if ! is_vault_encrypted "$vault_file"; then
                echo -e "${YELLOW}üìù Encrypting: $vault_file${NC}"
                
                # Check if vault password is available
                if [[ -n "$ANSIBLE_VAULT_PASSWORD_FILE" ]] && [[ -f "$ANSIBLE_VAULT_PASSWORD_FILE" ]]; then
                    ansible-vault encrypt "$vault_file" --vault-password-file="$ANSIBLE_VAULT_PASSWORD_FILE"
                else
                    echo -e "${YELLOW}Please enter vault password to encrypt $vault_file:${NC}"
                    ansible-vault encrypt "$vault_file"
                fi
                
                encrypted_files+=("$vault_file")
                echo -e "${GREEN}‚úÖ Encrypted: $vault_file${NC}"
            fi
        fi
    done
    
    # If we encrypted any files, commit them
    if [[ ${#encrypted_files[@]} -gt 0 ]]; then
        echo -e "${BLUE}üì¶ Committing encrypted vault files...${NC}"
        git add "${encrypted_files[@]}"
        git commit -m "üîí Auto-encrypt vault files before push

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Store the list of files we encrypted for later decryption
        printf '%s\n' "${encrypted_files[@]}" > .git/encrypted_files.tmp
        echo -e "${GREEN}‚úÖ Committed encrypted files${NC}"
        return 0
    else
        echo -e "${GREEN}‚úÖ All vault files already encrypted${NC}"
        return 1  # No files were encrypted
    fi
}

# Function to decrypt vault files after push
decrypt_vault_files() {
    if [[ -f .git/encrypted_files.tmp ]]; then
        echo -e "${BLUE}üîì Decrypting vault files for local development...${NC}"
        
        while IFS= read -r vault_file; do
            if [[ -f "$vault_file" ]] && is_vault_encrypted "$vault_file"; then
                echo -e "${YELLOW}üîì Decrypting: $vault_file${NC}"
                
                # Decrypt the file
                if [[ -n "$ANSIBLE_VAULT_PASSWORD_FILE" ]] && [[ -f "$ANSIBLE_VAULT_PASSWORD_FILE" ]]; then
                    ansible-vault decrypt "$vault_file" --vault-password-file="$ANSIBLE_VAULT_PASSWORD_FILE"
                else
                    echo -e "${YELLOW}Please enter vault password to decrypt $vault_file:${NC}"
                    ansible-vault decrypt "$vault_file"
                fi
                
                echo -e "${GREEN}‚úÖ Decrypted: $vault_file${NC}"
            fi
        done < .git/encrypted_files.tmp
        
        # Clean up temp file
        rm .git/encrypted_files.tmp
        echo -e "${GREEN}‚úÖ All files decrypted for local development${NC}"
    fi
}

# Function to check for other security violations
check_security_violations() {
    local violations=()
    
    # Check for private keys
    local private_keys=$(git ls-files | grep -E 'id_(rsa|dsa|ecdsa|ed25519)$' | grep -v '\.pub$')
    while IFS= read -r key_file; do
        if [[ -n "$key_file" ]]; then
            violations+=("‚ùå Private SSH key in repository: $key_file")
        fi
    done <<< "$private_keys"
    
    # Check for other plain-text secrets in non-vault files
    local other_files=$(git ls-files | grep -E '\.(yml|yaml|json|env)$' | grep -v '^\.secrets/' | grep -v '\.template$')
    
    while IFS= read -r file; do
        if [[ -n "$file" ]] && [[ -f "$file" ]]; then
            # Look for potential secrets (but not in vault files)
            if grep -P -i 'password.*:\s*["\'](?!.*REPLACE)(?!.*CHANGE)(?!.*TODO)(?!.*vault_)[^"\']{8,}' "$file" >/dev/null 2>&1; then
                violations+=("‚ùå Potential plain-text password in: $file (consider moving to vault)")
            fi
        fi
    done <<< "$other_files"
    
    if [[ ${#violations[@]} -gt 0 ]]; then
        printf '%s\n' "${violations[@]}"
        return 1
    fi
    
    return 0
}

# Main execution
echo -e "${BLUE}üîç Checking for security violations...${NC}"

# Check for non-vault security issues
if ! check_security_violations; then
    echo -e "\n${RED}üö® PUSH BLOCKED: Security violations detected!${NC}"
    echo -e "${YELLOW}Please fix the above issues before pushing.${NC}"
    exit 1
fi

# Encrypt vault files if needed
files_encrypted=false
if encrypt_vault_files; then
    files_encrypted=true
fi

# Create a trap to decrypt files even if push fails
trap 'if [[ "$files_encrypted" == true ]]; then decrypt_vault_files; fi' EXIT

echo -e "\n${GREEN}üöÄ Security checks passed! Proceeding with push...${NC}"

# Note: The actual push happens after this script
# The trap will decrypt files after push completes (or fails)