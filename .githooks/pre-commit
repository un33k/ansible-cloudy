#!/bin/bash

# Simple pre-commit hook: Warn about unencrypted vault files
# Allows commits but reminds developers to encrypt before pushing

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üìù Running pre-commit security check...${NC}"

# Function to check if a file is encrypted with ansible-vault
is_vault_encrypted() {
    local file="$1"
    if [[ -f "$file" ]]; then
        if head -n 1 "$file" | grep -q '^\$ANSIBLE_VAULT'; then
            return 0  # File is encrypted
        else
            return 1  # File is not encrypted
        fi
    fi
    return 1  # File doesn't exist
}

# Get list of staged files
staged_files=$(git diff --cached --name-only)

# Track warnings and critical violations
warnings_found=false
critical_violations=false

# Check each staged file
while IFS= read -r file; do
    if [[ -z "$file" ]]; then
        continue
    fi
    
    # Check vault files in .secrets directory
    if [[ "$file" == .secrets/*.yml ]] && [[ "$file" != *.template ]]; then
        if ! is_vault_encrypted "$file"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Unencrypted vault file: $file${NC}"
            echo -e "${BLUE}   Remember to encrypt before pushing to remote${NC}"
            warnings_found=true
        fi
    fi
    
    # Check for accidentally committed private keys (CRITICAL - BLOCK)
    if [[ "$file" == *id_rsa ]] || [[ "$file" == *id_dsa ]] || [[ "$file" == *id_ecdsa ]] || [[ "$file" == *id_ed25519 ]]; then
        if [[ "$file" != *.pub ]]; then
            echo -e "${RED}‚ùå CRITICAL: Private SSH key detected: $file${NC}"
            echo -e "${YELLOW}   Private keys should NEVER be committed to git${NC}"
            critical_violations=true
        fi
    fi
    
    # Check for other sensitive files (CRITICAL - BLOCK)
    if [[ "$file" == *.pem ]] || [[ "$file" == *.key ]] || [[ "$file" == *.p12 ]] || [[ "$file" == *.pfx ]]; then
        echo -e "${RED}‚ùå CRITICAL: Certificate/key file detected: $file${NC}"
        echo -e "${YELLOW}   Certificates and keys should not be committed${NC}"
        critical_violations=true
    fi
    
done <<< "$staged_files"

# Handle critical violations (block commit)
if [[ "$critical_violations" == true ]]; then
    echo -e "\n${RED}üö® COMMIT BLOCKED: Critical security violations!${NC}"
    echo -e "${YELLOW}Please remove sensitive files before committing:${NC}"
    echo -e "  ‚Ä¢ Use: ${GREEN}git rm --cached <filename>${NC}"
    echo -e "  ‚Ä¢ Add to .gitignore to prevent future commits"
    exit 1
fi

# Handle warnings (allow commit but inform)
if [[ "$warnings_found" == true ]]; then
    echo -e "\n${YELLOW}‚ÑπÔ∏è  Security Notice:${NC}"
    echo -e "${BLUE}Unencrypted vault files detected. The pre-push hook will block pushing until encrypted.${NC}"
    echo -e "${GREEN}‚úÖ Commit allowed - encrypt before pushing${NC}"
else
    echo -e "${GREEN}‚úÖ No security issues detected${NC}"
fi

echo -e "${GREEN}‚úÖ Pre-commit check complete${NC}"
exit 0