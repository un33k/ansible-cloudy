# n8n Production Stack with Portainer Management
# This stack includes PostgreSQL with pgvector, Redis, n8n, Portainer, and Nginx Proxy Manager
# Usage: cli docker --deploy-compose /path/to/this/file --compose-name n8n-stack

version: "3.8"

services:

  # PostgreSQL with pgvector extension for persistent data storage
  postgres:
    image: pgvector/pgvector:postgres-17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8npass}
      POSTGRES_DB: ${POSTGRES_DB:-n8ndb}
    volumes:
      - /data/postgres:/var/lib/postgresql/data
      - ./init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql:ro
    networks:
      - internal

  # Redis in-memory queue broker for job coordination
  redis:
    image: redis:6
    restart: unless-stopped
    volumes:
      - /data/redis:/data
    networks:
      - internal

  # Main n8n app: UI/API, webhook intake, job producer
  n8n:
    image: n8nio/n8n
    restart: unless-stopped
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8ndb}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8npass}

      QUEUE_MODE: redis
      QUEUE_REDIS_HOST: redis

      EXECUTIONS_MODE: queue

      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-changeme}

      N8N_HOST: ${N8N_HOST:-n8n.example.com}
      N8N_PORT: 5678
      WEBHOOK_TUNNEL_URL: ${WEBHOOK_URL:-https://n8n.example.com/}

      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your-long-random-key}
    volumes:
      - /data/n8n:/home/node/.n8n
    depends_on:
      - postgres
      - redis
    networks:
      - internal
      - proxy

  # n8n Worker: Executes workflow jobs from Redis queue
  # Scale with: docker-compose up -d --scale n8n-worker=3
  n8n-worker:
    image: n8nio/n8n
    restart: unless-stopped
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8ndb}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8npass}

      QUEUE_MODE: redis
      QUEUE_REDIS_HOST: redis

      EXECUTIONS_MODE: queue

      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your-long-random-key}
    depends_on:
      - postgres
      - redis
    networks:
      - internal

  # Portainer: Docker management UI
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/portainer/data:/data
    networks:
      - internal
      - proxy

  # Nginx Proxy Manager: Reverse proxy, SSL termination
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    ports:
      - "80:80"       # HTTP for ACME challenge and redirects
      - "443:443"     # HTTPS traffic
      - "81:81"       # NPM Admin UI
    volumes:
      - /data/npm/data:/data
      - /data/npm/letsencrypt:/etc/letsencrypt
    networks:
      - proxy

networks:
  proxy:
    driver: bridge
  internal:
    driver: bridge