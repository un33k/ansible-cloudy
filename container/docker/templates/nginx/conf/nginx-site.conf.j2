# HTTP to HTTPS redirect
server {
    listen 80;
    server_name {{domain_name}};

    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS reverse proxy
server {
    listen 443 ssl http2;
    server_name {{domain_name}};

    # SSL configuration
    ssl_certificate     /etc/nginx/certs/{{domain_name}}_selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/{{domain_name}}_selfsigned.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Logging
    access_log /var/log/nginx/{{domain_name}}_access.log;
    error_log /var/log/nginx/{{domain_name}}_error.log;
    
    # Client body size limit
    client_max_body_size 100M;

    location / {
        proxy_pass http://{{docker_container_name}}:{{remote_port}};
        
        # Pass all client headers
        proxy_pass_request_headers on;
        
        # Essential proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Pass original request headers
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Prevent header modifications
        proxy_hide_header X-Powered-By;
        proxy_pass_header Server;
        
        # Increase buffer sizes for large headers
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle errors gracefully
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_types text/plain text/css text/xml application/json application/javascript;
        
        # Rate limiting (optional - uncomment to enable)
        # limit_req zone=one burst=10 nodelay;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}