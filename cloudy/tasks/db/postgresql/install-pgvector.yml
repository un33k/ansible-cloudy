---
# cloudy/tasks/db/postgresql/install-pgvector.yml
# Install pgvector extension for PostgreSQL vector operations

- name: Detect PostgreSQL version
  shell: |
    psql --version | grep -oP 'PostgreSQL \K\d+' || echo "{{ pg_version | default('17') }}"
  register: detected_pg_version
  changed_when: false
  
- name: Set PostgreSQL version
  set_fact:
    actual_pg_version: "{{ detected_pg_version.stdout | default(pg_version | default('17')) }}"
    
- name: Display detected version
  debug:
    msg: "Detected PostgreSQL version: {{ actual_pg_version }}"

- name: Check if pgvector package is available
  shell: |
    apt-cache search postgresql-{{ actual_pg_version }}-pgvector | grep -q pgvector && echo "available" || echo "not_available"
  register: pgvector_apt_check
  changed_when: false

- name: Install pgvector from apt repository
  apt:
    name: "postgresql-{{ actual_pg_version }}-pgvector"
    state: present
    update_cache: yes
  when: pgvector_apt_check.stdout == "available"
  register: pgvector_apt_install

- name: Install build dependencies for pgvector (if building from source)
  apt:
    name:
      - build-essential
      - postgresql-server-dev-{{ actual_pg_version }}
      - git
      - make
      - gcc
    state: present
    update_cache: yes
  when: pgvector_apt_check.stdout == "not_available"

- name: Check if pgvector is already installed
  shell: |
    sudo -u postgres psql -t -c "SELECT 1 FROM pg_available_extensions WHERE name = 'vector';" | grep -q 1
  register: pgvector_check
  changed_when: false
  failed_when: false

- name: Clone pgvector repository
  git:
    repo: https://github.com/pgvector/pgvector.git
    dest: /tmp/pgvector
    version: "{{ pgvector_version | default('v0.5.1') }}"
    force: yes
  when: 
    - pgvector_check.rc != 0
    - pgvector_apt_check.stdout == "not_available"

- name: Build and install pgvector
  shell: |
    cd /tmp/pgvector
    make clean
    make
    make install
  when: 
    - pgvector_check.rc != 0
    - pgvector_apt_check.stdout == "not_available"

- name: Create pgvector extension in postgres database
  postgresql_ext:
    name: vector
    db: postgres
    state: present
  become_user: postgres

- name: Create pgvector extension in template database
  postgresql_ext:
    name: vector
    db: template1
    state: present
  become_user: postgres

- name: Create pgvector extension in specified databases
  postgresql_ext:
    name: vector
    db: "{{ item.name }}"
    state: present
  become_user: postgres
  loop: "{{ pg_databases }}"
  when: 
    - pg_databases is defined
    - item.extensions is defined
    - "'vector' in item.extensions or 'pgvector' in item.extensions"

- name: Verify pgvector installation
  postgresql_query:
    db: postgres
    query: "SELECT extversion FROM pg_extension WHERE extname = 'vector';"
  become_user: postgres
  register: pgvector_version_check

- name: Display pgvector version
  debug:
    msg: "pgvector version {{ pgvector_version_check.query_result[0].extversion }} installed successfully"
  when: pgvector_version_check.query_result is defined and pgvector_version_check.query_result|length > 0

- name: Create example vector table for testing
  postgresql_query:
    db: postgres
    query: |
      CREATE TABLE IF NOT EXISTS vector_test (
        id bigserial PRIMARY KEY,
        embedding vector(3)
      );
      INSERT INTO vector_test (embedding) VALUES 
        ('[1,2,3]'), 
        ('[4,5,6]') 
      ON CONFLICT DO NOTHING;
  become_user: postgres
  when: pg_create_test_data | default(false)

- name: Cleanup build directory
  file:
    path: /tmp/pgvector
    state: absent
  when: 
    - pgvector_check.rc != 0
    - pgvector_apt_check.stdout == "not_available"