---
# cloudy/tasks/db/postgresql/configure-production.yml
# Apply production configuration to PostgreSQL

- name: Create PostgreSQL configuration directory
  file:
    path: /etc/postgresql/{{ pg_version }}/main/conf.d
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'

- name: Apply production PostgreSQL configuration
  template:
    src: postgresql.conf.j2
    dest: /etc/postgresql/{{ pg_version }}/main/conf.d/00-cloudy-production.conf
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  notify: restart postgresql

- name: Apply secure authentication configuration
  template:
    src: pg_hba.conf.j2
    dest: /etc/postgresql/{{ pg_version }}/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  notify: reload postgresql

- name: Include custom configuration in main postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ pg_version }}/main/postgresql.conf
    line: "include_dir = 'conf.d'"
    create: no
  notify: restart postgresql

- name: Create SSL certificate directory
  file:
    path: /etc/postgresql/{{ pg_version }}/main
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Generate self-signed SSL certificate (if not exists)
  command: |
    openssl req -new -x509 -days 365 -nodes -text \
    -out server.crt -keyout server.key -subj "/CN=postgres"
  args:
    chdir: /etc/postgresql/{{ pg_version }}/main
    creates: /etc/postgresql/{{ pg_version }}/main/server.crt
  become_user: postgres

- name: Set SSL certificate permissions
  file:
    path: "{{ item.path }}"
    owner: postgres
    group: postgres
    mode: "{{ item.mode }}"
  loop:
    - { path: "/etc/postgresql/{{ pg_version }}/main/server.crt", mode: "0600" }
    - { path: "/etc/postgresql/{{ pg_version }}/main/server.key", mode: "0600" }

- name: Create archive directory for WAL files
  file:
    path: /var/lib/postgresql/archive
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Enable pg_stat_statements extension
  postgresql_ext:
    name: pg_stat_statements
    db: postgres
    state: present
  become_user: postgres

- name: Create monitoring user
  postgresql_user:
    name: monitoring
    password: "{{ vault_pg_monitoring_password | default('monitoring123') }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present
  become_user: postgres
  when: pg_monitoring_enabled | default(true)

- name: Grant monitoring permissions
  postgresql_query:
    db: postgres
    query: |
      GRANT CONNECT ON DATABASE postgres TO monitoring;
      GRANT pg_read_all_stats TO monitoring;
      GRANT pg_read_all_settings TO monitoring;
  become_user: postgres
  when: pg_monitoring_enabled | default(true)

- name: Configure kernel parameters for PostgreSQL
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { name: 'vm.swappiness', value: '10' }
    - { name: 'vm.dirty_ratio', value: '15' }
    - { name: 'vm.dirty_background_ratio', value: '5' }
    - { name: 'vm.overcommit_memory', value: '2' }
    - { name: 'kernel.shmmax', value: '{{ (ansible_memtotal_mb * 1024 * 1024 * 0.5) | int }}' }
    - { name: 'kernel.shmall', value: '{{ (ansible_memtotal_mb * 256) | int }}' }

- name: Create PostgreSQL tuning report
  shell: |
    echo "=== PostgreSQL Production Configuration ===" > /var/lib/postgresql/tuning-report.txt
    echo "Generated: $(date)" >> /var/lib/postgresql/tuning-report.txt
    echo "" >> /var/lib/postgresql/tuning-report.txt
    echo "System RAM: {{ ansible_memtotal_mb }}MB" >> /var/lib/postgresql/tuning-report.txt
    echo "Shared Buffers: {{ [(ansible_memtotal_mb * 0.25) | int, 128] | max }}MB" >> /var/lib/postgresql/tuning-report.txt
    echo "Effective Cache: {{ [(ansible_memtotal_mb * 0.75) | int, 1024] | max }}MB" >> /var/lib/postgresql/tuning-report.txt
    echo "Work Mem: {{ [(ansible_memtotal_mb / 100 / 4) | int, 4] | max }}MB" >> /var/lib/postgresql/tuning-report.txt
    echo "" >> /var/lib/postgresql/tuning-report.txt
    echo "Configuration applied to: /etc/postgresql/{{ pg_version }}/main/conf.d/" >> /var/lib/postgresql/tuning-report.txt
  become_user: postgres