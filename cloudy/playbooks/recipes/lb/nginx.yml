# Recipe: Nginx Load Balancer Setup
# Usage: ansible-playbook playbooks/recipes/lb/nginx.yml -i inventory/hosts.yml

---
- name: Nginx Load Balancer Setup Recipe
  hosts: service_targets
  gather_facts: true
  become: true
  
  vars_files:
    - "../../../defaults/all.yml"
    - "../../../defaults/nginx.yml"
  
  vars:
    task_paths: "../../../tasks"
    # Override defaults with CLI parameters
    nginx_domain: "{{ domain | default(nginx_domain) }}"
    nginx_protocol: "{{ proto | default(nginx_protocol) }}"
    nginx_interface: "{{ interface | default(default_interface) }}"
    nginx_upstream_servers: "{{ backends | default(nginx_upstream_servers) }}"
    nginx_ssl_cert_dir: "{{ ssl_cert_dir | default(nginx_ssl_cert_dir) }}"
    
    # Variable mapping for backward compatibility
    domain_name: "{{ nginx_domain }}"  # Deprecated, use nginx_domain
    protocol: "{{ nginx_protocol }}"  # Deprecated, use nginx_protocol
    upstream_servers: "{{ nginx_upstream_servers }}"  # Deprecated, use nginx_upstream_servers
    
    # Setup flags
    run_generic_setup: "{{ generic | default(true) }}"
    setup_ssl: "{{ nginx_protocol == 'https' }}"
    setup_firewall: true
    
  pre_tasks:
    # Ensure proper secure connection
    - name: Validate secure connection
      include_tasks: "{{ task_paths }}/sys/core/ensure-secure-connection.yml"
    
    - name: Display load balancer setup information
      debug:
        msg: |
          ðŸš€ Starting Nginx Load Balancer Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          Domain: {{ nginx_domain }}
          Protocol: {{ nginx_protocol }}
          Backend Servers: {{ nginx_upstream_servers | length }} configured
          SSL: {{ 'Enabled' if setup_ssl else 'Disabled' }}
          
  tasks:
    # Generic Server Setup - Include core foundation tasks
    - name: Initialize system
      include_tasks: "{{ task_paths }}/sys/core/init.yml"
      when: run_generic_setup | bool
      tags: [generic, foundation, init]
      
    - name: Update system packages
      include_tasks: "{{ task_paths }}/sys/core/update.yml"
      when: run_generic_setup | bool
      tags: [generic, foundation, update]
      
    - name: Install common utilities
      include_tasks: "{{ task_paths }}/sys/core/install-common.yml"
      when: run_generic_setup | bool
      tags: [generic, foundation, packages]
      
    - name: Install UFW firewall
      include_tasks: "{{ task_paths }}/sys/firewall/install.yml"
      when: run_generic_setup | bool
      tags: [generic, foundation, firewall]
      
    # Nginx Installation
    - name: Install Nginx web server
      include_tasks: "{{ task_paths }}/web/nginx/install.yml"
      tags: [nginx, install]
      
    # SSL Configuration (if HTTPS)
    - name: Copy SSL certificates
      include_tasks: "{{ task_paths }}/web/nginx/copy-ssl.yml"
      vars:
        domain: "{{ nginx_domain }}"
        ssl_cert_dir: "{{ nginx_ssl_cert_dir }}"
      when: setup_ssl | bool
      tags: [nginx, ssl]
      
    # Domain Configuration
    - name: Setup Nginx domain configuration
      include_tasks: "{{ task_paths }}/web/nginx/setup-domain.yml"
      vars:
        domain: "{{ nginx_domain }}"
        proto: "{{ nginx_protocol }}"
        interface: "{{ nginx_interface }}"
        upstream_address: "{{ nginx_upstream_servers[0].split(':')[0] if nginx_upstream_servers else '127.0.0.1' }}"
        upstream_port: "{{ nginx_upstream_servers[0].split(':')[1] if nginx_upstream_servers and ':' in nginx_upstream_servers[0] else '8000' }}"
      tags: [nginx, domain]
      
    # Custom Load Balancer Configuration (if multiple backends)
    - name: Create load balancer configuration with multiple backends
      template:
        src: nginx-loadbalancer.conf.j2
        dest: "/etc/nginx/sites-available/{{ nginx_domain }}.conf"
        owner: root
        group: root
        mode: '0644'
      vars:
        lb_domain: "{{ nginx_domain }}"
        lb_protocol: "{{ nginx_protocol }}"
        lb_interface: "{{ nginx_interface }}"
        lb_backends: "{{ nginx_upstream_servers }}"
      when: nginx_upstream_servers | length > 1
      notify: reload nginx
      tags: [nginx, loadbalancer]
      
    # Firewall Configuration
    - name: Allow HTTP through firewall
      include_tasks: "{{ task_paths }}/sys/firewall/allow-http.yml"
      when: setup_firewall | bool
      tags: [firewall, http]
      
    - name: Allow HTTPS through firewall
      include_tasks: "{{ task_paths }}/sys/firewall/allow-https.yml"
      when: setup_firewall | bool and setup_ssl
      tags: [firewall, https]
      
  post_tasks:
    - name: Display load balancer completion summary
      debug:
        msg: |
          ðŸŽ‰ âœ… NGINX LOAD BALANCER SETUP COMPLETED SUCCESSFULLY!
          ðŸ“‹ Configuration Summary:
             â”œâ”€â”€ Domain: {{ nginx_domain }}
             â”œâ”€â”€ Protocol: {{ nginx_protocol }}
             â”œâ”€â”€ Interface: {{ nginx_interface }}
             â”œâ”€â”€ SSL/TLS: {{ 'Enabled with certificates' if setup_ssl else 'Disabled (HTTP only)' }}
             â”œâ”€â”€ Backend Servers: {{ nginx_upstream_servers | join(', ') if nginx_upstream_servers else 'Default (127.0.0.1:8000)' }}
             â”œâ”€â”€ Load Balancing: {{ 'Multi-backend' if nginx_upstream_servers | length > 1 else 'Single backend/reverse proxy' }}
             â”œâ”€â”€ Firewall: {{ 'HTTP/HTTPS ports allowed' if setup_firewall else 'Not configured' }}
             â””â”€â”€ Status: Ready for traffic distribution
          
          ðŸš€ Nginx load balancer is ready to serve traffic!
          
          ðŸ“– Access Information:
          - URL: {{ nginx_protocol }}://{{ nginx_domain }}
          - Config: /etc/nginx/sites-available/{{ nginx_domain }}.conf
          - Logs: /var/log/nginx/
          
          ðŸ“– Next Steps:
          1. Test load balancer: curl {{ nginx_protocol }}://{{ nginx_domain }}
          2. Configure health checks for backend servers
          3. Set up monitoring and logging
          4. Configure SSL renewal if using Let's Encrypt