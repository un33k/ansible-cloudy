# Recipe: All-in-One Standalone Server
# Purpose: Deploy complete stack (PostgreSQL, Redis, Nginx, App) on single server
# Usage: ./claudia standalone --install [--app-type django|nodejs] [--domain example.com]

---
- name: All-in-One Standalone Server Setup
  hosts: service_targets
  gather_facts: true
  become: true
  
  vars_files:
    - "../../../defaults/all.yml"
    - "../../../defaults/postgresql.yml"
    - "../../../defaults/redis.yml"
    - "../../../defaults/nginx.yml"
    - "../../../defaults/nodejs.yml"
  
  vars:
    task_paths: "../../../tasks"
    
    # Deployment configuration
    app_type: "{{ vault_app_type | default('django') }}"  # django or nodejs
    domain: "{{ vault_domain | default(ansible_default_ipv4.address) }}"
    enable_ssl: "{{ vault_enable_ssl | default(true) }}"
    
    # Component flags
    install_postgresql: "{{ vault_install_postgresql | default(true) }}"
    install_redis: "{{ vault_install_redis | default(true) }}"
    install_nginx: "{{ vault_install_nginx | default(true) }}"
    
    # PostgreSQL settings
    pg_version: "{{ vault_pg_version | default(pg_version_default) }}"
    pg_port: "{{ vault_pg_port | default(5432) }}"
    pg_password: "{{ vault_pg_password | default('postgres123') }}"
    
    # Redis settings
    redis_port: "{{ vault_redis_port | default(6379) }}"
    redis_memory_mb: "{{ vault_redis_memory_mb | default(512) }}"
    redis_password: "{{ vault_redis_password | default('redis123') }}"
    
    # Application settings
    app_name: "{{ vault_app_name | default('webapp') }}"
    app_port: "{{ vault_app_port | default(8000 if app_type == 'django' else 3000) }}"
    app_path: "{{ vault_app_path | default('/var/www/' + app_name) }}"
    
    # Production mode
    production_mode: "{{ vault_production_mode | default(true) }}"
    
  pre_tasks:
    # Ensure proper secure connection
    - name: Validate secure connection
      include_tasks: "{{ task_paths }}/sys/core/ensure-secure-connection.yml"
    
    - name: Display standalone setup information
      debug:
        msg: |
          üöÄ Starting All-in-One Standalone Server Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          
          üìã Stack Configuration:
          ‚îú‚îÄ‚îÄ Application Type: {{ app_type | upper }}
          ‚îú‚îÄ‚îÄ Domain: {{ domain }}
          ‚îú‚îÄ‚îÄ SSL: {{ 'Enabled' if enable_ssl else 'Disabled' }}
          ‚îú‚îÄ‚îÄ PostgreSQL: {{ 'v' + pg_version + ' on port ' + (pg_port|string) if install_postgresql else 'Skipped' }}
          ‚îú‚îÄ‚îÄ Redis: {{ 'Port ' + (redis_port|string) + ' with ' + (redis_memory_mb|string) + 'MB' if install_redis else 'Skipped' }}
          ‚îú‚îÄ‚îÄ Nginx: {{ 'Reverse proxy with SSL' if install_nginx else 'Skipped' }}
          ‚îî‚îÄ‚îÄ Production Mode: {{ 'Enabled' if production_mode else 'Disabled' }}
          
          ‚ö†Ô∏è  Resource Requirements:
          ‚îú‚îÄ‚îÄ RAM: Minimum 2GB recommended
          ‚îú‚îÄ‚îÄ CPU: 2+ cores recommended
          ‚îú‚îÄ‚îÄ Disk: 20GB+ recommended
          ‚îî‚îÄ‚îÄ Current RAM: {{ ansible_memtotal_mb }}MB
          
  tasks:
    # =============================================================================
    # PHASE 1: SYSTEM PREPARATION
    # =============================================================================
    
    - name: Update system packages
      include_tasks: "{{ task_paths }}/sys/core/update.yml"
      tags: [system, update]
    
    - name: Install common utilities
      include_tasks: "{{ task_paths }}/sys/core/install-common.yml"
      tags: [system, packages]
    
    - name: Configure system performance
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      loop:
        - { name: 'vm.swappiness', value: '10' }
        - { name: 'vm.overcommit_memory', value: '1' }
        - { name: 'net.core.somaxconn', value: '65535' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '65535' }
      tags: [system, performance]
    
    # =============================================================================
    # PHASE 2: DATABASE LAYER (PostgreSQL)
    # =============================================================================
    
    - name: Install PostgreSQL database
      include: ../db/psql{{ '-production' if production_mode else '' }}.yml
      vars:
        setup_postgresql: "{{ install_postgresql }}"
        pg_databases:
          - name: "{{ app_name }}"
            owner: "{{ app_name }}_user"
        pg_users:
          - name: "{{ app_name }}_user"
            password: "{{ pg_password }}"
            database: "{{ app_name }}"
      when: install_postgresql | bool
      tags: [postgresql, database]
    
    # =============================================================================
    # PHASE 3: CACHE LAYER (Redis)
    # =============================================================================
    
    - name: Install Redis cache
      include: ../cache/redis{{ '-production' if production_mode else '' }}.yml
      vars:
        redis_bind: "127.0.0.1"
        redis_requirepass: "{{ redis_password }}"
        redis_maxmemory_mb: "{{ redis_memory_mb }}"
      when: install_redis | bool
      tags: [redis, cache]
    
    # =============================================================================
    # PHASE 4: APPLICATION LAYER
    # =============================================================================
    
    # Django Application
    - name: Install Django application
      include: ../www/django.yml
      vars:
        web_server: "gunicorn"
        setup_postgresql: false  # Already installed
        setup_pgbouncer: true
        django_port: "{{ app_port }}"
        domain_name: "{{ domain }}"
      when: app_type == 'django'
      tags: [django, application]
    
    # Node.js Application
    - name: Install Node.js application
      include: ../www/nodejs.yml
      vars:
        setup_nginx: false  # Will be configured separately
        app_repo: "{{ vault_app_repo | default('') }}"
        nginx_domain: "{{ domain }}"
      when: app_type == 'nodejs'
      tags: [nodejs, application]
    
    # =============================================================================
    # PHASE 5: WEB LAYER (Nginx)
    # =============================================================================
    
    - name: Install Nginx load balancer
      include: ../lb/nginx{{ '-production' if production_mode else '' }}.yml
      vars:
        nginx_domain: "{{ domain }}"
        nginx_ssl_enabled: "{{ enable_ssl }}"
        nginx_backends:
          - { host: "127.0.0.1", port: "{{ app_port }}" }
      when: install_nginx | bool
      tags: [nginx, web]
    
    # =============================================================================
    # PHASE 6: SSL CONFIGURATION
    # =============================================================================
    
    - name: Setup Let's Encrypt SSL
      include_tasks: "{{ task_paths }}/web/nginx/setup-letsencrypt.yml"
      vars:
        le_domain: "{{ domain }}"
        le_email: "{{ vault_ssl_email | default('admin@' + domain) }}"
      when: 
        - install_nginx | bool
        - enable_ssl | bool
        - domain != ansible_default_ipv4.address
      tags: [ssl, letsencrypt]
    
    # =============================================================================
    # PHASE 7: MONITORING AND HEALTH CHECKS
    # =============================================================================
    
    - name: Setup basic monitoring
      include_tasks: "{{ task_paths }}/monitoring/setup-basic.yml"
      when: production_mode | bool
      tags: [monitoring]
    
    - name: Configure log rotation
      template:
        src: standalone/logrotate-all.j2
        dest: /etc/logrotate.d/standalone
        owner: root
        group: root
        mode: '0644'
      tags: [logs]
    
    # =============================================================================
    # PHASE 8: FIREWALL CONFIGURATION
    # =============================================================================
    
    - name: Configure firewall for all services
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: tcp
        comment: "{{ item.comment }}"
      loop:
        - { port: 80, comment: "HTTP" }
        - { port: 443, comment: "HTTPS" }
        - { port: "{{ pg_port }}", comment: "PostgreSQL" }
        - { port: "{{ redis_port }}", comment: "Redis" }
      when: item.port != "" and (item.comment != "PostgreSQL" or install_postgresql) and (item.comment != "Redis" or install_redis)
      tags: [firewall]
    
    # =============================================================================
    # PHASE 9: PERFORMANCE OPTIMIZATION
    # =============================================================================
    
    - name: Optimize services for single server
      template:
        src: standalone/optimization.sh.j2
        dest: /usr/local/bin/optimize-standalone.sh
        owner: root
        group: root
        mode: '0755'
      tags: [optimization]
    
    - name: Run optimization script
      command: /usr/local/bin/optimize-standalone.sh
      when: production_mode | bool
      tags: [optimization]
    
    # =============================================================================
    # PHASE 10: VALIDATION
    # =============================================================================
    
    - name: Validate PostgreSQL
      postgresql_ping:
        db: "{{ app_name }}"
        login_host: localhost
        login_port: "{{ pg_port }}"
        login_user: postgres
      become_user: postgres
      when: install_postgresql | bool
      tags: [validation]
    
    - name: Validate Redis
      command: redis-cli -p {{ redis_port }} {% if redis_password %}-a {{ redis_password }}{% endif %} ping
      register: redis_ping
      changed_when: false
      failed_when: redis_ping.stdout != "PONG"
      when: install_redis | bool
      tags: [validation]
    
    - name: Validate Nginx
      uri:
        url: "http://localhost/health"
        status_code: 200
      when: install_nginx | bool
      tags: [validation]
    
    - name: Validate application
      uri:
        url: "http://localhost:{{ app_port }}/{% if app_type == 'nodejs' %}health{% endif %}"
        status_code: [200, 301, 302]
      tags: [validation]
    
  post_tasks:
    - name: Generate standalone deployment report
      shell: |
        echo "=== Standalone Server Deployment Report ===" > /root/standalone-report.txt
        echo "Generated: $(date)" >> /root/standalone-report.txt
        echo "" >> /root/standalone-report.txt
        echo "System Information:" >> /root/standalone-report.txt
        echo "  Hostname: {{ ansible_hostname }}" >> /root/standalone-report.txt
        echo "  IP Address: {{ ansible_default_ipv4.address }}" >> /root/standalone-report.txt
        echo "  Domain: {{ domain }}" >> /root/standalone-report.txt
        echo "  RAM: {{ ansible_memtotal_mb }}MB" >> /root/standalone-report.txt
        echo "  CPUs: {{ ansible_processor_vcpus }}" >> /root/standalone-report.txt
        echo "" >> /root/standalone-report.txt
        echo "Stack Components:" >> /root/standalone-report.txt
        echo "  Application: {{ app_type | upper }} on port {{ app_port }}" >> /root/standalone-report.txt
        {% if install_postgresql %}
        echo "  PostgreSQL: v{{ pg_version }} on port {{ pg_port }}" >> /root/standalone-report.txt
        {% endif %}
        {% if install_redis %}
        echo "  Redis: Port {{ redis_port }} ({{ redis_memory_mb }}MB cache)" >> /root/standalone-report.txt
        {% endif %}
        {% if install_nginx %}
        echo "  Nginx: Reverse proxy for {{ domain }}" >> /root/standalone-report.txt
        {% endif %}
        echo "" >> /root/standalone-report.txt
        echo "Service Status:" >> /root/standalone-report.txt
        systemctl status postgresql redis-server nginx {% if app_type == 'django' %}supervisor{% else %}pm2-{{ app_name }}{% endif %} --no-pager | grep "Active:" >> /root/standalone-report.txt
        echo "" >> /root/standalone-report.txt
        echo "Resource Usage:" >> /root/standalone-report.txt
        free -h >> /root/standalone-report.txt
        echo "" >> /root/standalone-report.txt
        df -h >> /root/standalone-report.txt
      tags: [report]
    
    - name: Display standalone deployment summary
      debug:
        msg: |
          üéâ ‚úÖ ALL-IN-ONE STANDALONE SERVER DEPLOYED SUCCESSFULLY!
          
          üìã Deployment Summary:
             ‚îú‚îÄ‚îÄ Server: {{ inventory_hostname }} ({{ ansible_host }})
             ‚îú‚îÄ‚îÄ Domain: {{ domain }}
             ‚îú‚îÄ‚îÄ Application: {{ app_type | upper }} ({{ app_name }})
             ‚îú‚îÄ‚îÄ SSL: {{ 'Enabled with ' + ('Let\'s Encrypt' if domain != ansible_default_ipv4.address else 'self-signed cert') if enable_ssl else 'Disabled' }}
             ‚îî‚îÄ‚îÄ Production Mode: {{ 'Enabled' if production_mode else 'Disabled' }}
          
          üîß Stack Components:
             ‚îú‚îÄ‚îÄ PostgreSQL: {{ 'v' + pg_version + ' on localhost:' + (pg_port|string) if install_postgresql else 'Not installed' }}
             ‚îú‚îÄ‚îÄ Redis: {{ 'localhost:' + (redis_port|string) + ' (' + (redis_memory_mb|string) + 'MB)' if install_redis else 'Not installed' }}
             ‚îú‚îÄ‚îÄ Application: {{ app_type | upper }} on localhost:{{ app_port }}
             ‚îî‚îÄ‚îÄ Nginx: {{ 'Reverse proxy with ' + ('SSL' if enable_ssl else 'HTTP') if install_nginx else 'Not installed' }}
          
          üåê Access URLs:
             ‚îú‚îÄ‚îÄ Application: {{ 'https://' if enable_ssl else 'http://' }}{{ domain }}
             ‚îú‚îÄ‚îÄ Admin: {{ 'https://' if enable_ssl else 'http://' }}{{ domain }}/admin (Django only)
             ‚îî‚îÄ‚îÄ Health: {{ 'https://' if enable_ssl else 'http://' }}{{ domain }}/health
          
          üîë Credentials:
             ‚îú‚îÄ‚îÄ PostgreSQL: {{ app_name }}_user / {{ pg_password if install_postgresql else 'N/A' }}
             ‚îú‚îÄ‚îÄ Redis: {{ redis_password if install_redis else 'N/A' }}
             ‚îî‚îÄ‚îÄ Application: Check {{ app_path }}/.env
          
          üìä Reports & Logs:
             ‚îú‚îÄ‚îÄ Deployment Report: /root/standalone-report.txt
             ‚îú‚îÄ‚îÄ Nginx Logs: /var/log/nginx/
             ‚îú‚îÄ‚îÄ App Logs: {% if app_type == 'django' %}/var/log/{{ app_name }}/{% else %}pm2 logs {{ app_name }}{% endif %}
             ‚îî‚îÄ‚îÄ Database Logs: /var/log/postgresql/
          
          üöÄ Management Commands:
             ‚îú‚îÄ‚îÄ Restart all: systemctl restart postgresql redis-server nginx {% if app_type == 'django' %}supervisor{% else %}pm2-{{ app_name }}{% endif %}
             ‚îú‚îÄ‚îÄ Check status: systemctl status --all
             ‚îú‚îÄ‚îÄ View logs: journalctl -f
             ‚îî‚îÄ‚îÄ Monitor: htop
          
          ‚ö° Optimization Tips:
             1. Run /usr/local/bin/optimize-standalone.sh periodically
             2. Monitor resource usage with htop
             3. Check logs regularly for errors
             4. Set up backups for PostgreSQL and application data