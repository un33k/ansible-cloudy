# Recipe: Rock-Solid Security Setup
# Purpose: Enterprise-grade security - Root (SSH keys) + Grunt User (password+SSH keys)
# Usage: ansible-playbook playbooks/recipes/core/security.yml -i inventory/hosts.yml

---
- name: Rock-Solid Server Security Setup
  hosts: security_targets
  gather_facts: true
  become: true
  
  vars:
    task_paths: "../../../tasks"
    emergency_user: "{{ grunt_user }}"    # Only set if vault_grunt_user is defined
    # SSH Port Management Variables
    target_ssh_port: "{{ new_ssh_port | default(vault_ssh_port | default(22022)) }}"
    phase_mode: "{{ 'port_change' if ssh_port_change_only | default(false) else 'full' if not skip_ssh_port_change | default(false) else 'no_port_change' }}"
    
  pre_tasks:
    - name: Validate root connection for security setup
      fail:
        msg: |
          ‚ùå SECURITY SETUP ERROR: Must connect as root user!
          
          Security setup requires root access with password.
          
          Expected: ansible_user should be 'root'
          Actual: ansible_user is '{{ ansible_user }}'
          
          üîß Fix:
          1. Target 'security_targets' group in inventory
          2. Ensure vault_root_password is set
          3. Use: ./claudia security --install
      when: ansible_user != 'root'
    
    - name: Display security setup information
      debug:
        msg: |
          üîê Starting Rock-Solid Security Setup ({{ phase_mode }} mode)
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          Connection: {{ ansible_user }}@{{ ansible_host }}:{{ ansible_port }}
          
          Security Model:
          ‚îú‚îÄ‚îÄ Root User: SSH keys ONLY (automation access)
          ‚îú‚îÄ‚îÄ Grunt User: {{ emergency_user if vault_grunt_user is defined else 'Not configured - Optional service user' }} {{ '(password + SSH keys)' if vault_grunt_user is defined else '' }}
          ‚îú‚îÄ‚îÄ SSH Port: {{ ansible_port }} ‚Üí {{ target_ssh_port }} (secure port)
          ‚îî‚îÄ‚îÄ Firewall: UFW enabled with strict rules
          
  tasks:
    # Phase 1: Foundation Setup (only in full mode)
    - name: Update system packages
      include_tasks: "{{ task_paths }}/sys/core/update.yml"
      when: phase_mode != 'port_change'
      tags: [foundation, update]
      
    - name: Install common utilities
      include_tasks: "{{ task_paths }}/sys/core/install-common.yml"
      when: phase_mode != 'port_change'
      tags: [foundation, packages]
      
    # Phase 2: SSH Key Security for Root (only in full mode)
    - name: Install SSH public key for root
      include_tasks: "{{ task_paths }}/sys/ssh/install-public-key.yml"
      vars:
        target_user: "root"
        pub_key_path: "{{ ansible_ssh_private_key_file }}.pub"
      when: ansible_ssh_private_key_file is defined and phase_mode != 'port_change'
      tags: [ssh, keys, root]
      
    # Phase 3: Create Optional Grunt Service User (only in full mode)
    - name: Create grunt user ({{ emergency_user }})
      include_tasks: "{{ task_paths }}/sys/user/add-user.yml"
      vars:
        username: "{{ emergency_user }}"
      when: vault_grunt_user is defined and phase_mode != 'port_change'
      tags: [users, grunt]
      
    - name: Set grunt user password
      include_tasks: "{{ task_paths }}/sys/user/change-password.yml"
      vars:
        username: "{{ emergency_user }}"
        password: "{{ grunt_password }}"
      when: vault_grunt_user is defined and phase_mode != 'port_change'
      tags: [users, grunt, password]
      
    - name: Add grunt user to sudoers with NOPASSWD
      include_tasks: "{{ task_paths }}/sys/user/add-sudoer.yml"
      vars:
        username: "{{ emergency_user }}"
        nopasswd_sudo: true
      when: vault_grunt_user is defined and phase_mode != 'port_change'
      tags: [users, grunt, sudo]
      
    - name: Install SSH public key for grunt user
      include_tasks: "{{ task_paths }}/sys/ssh/install-public-key.yml"
      vars:
        target_user: "{{ emergency_user }}"
        pub_key_path: "{{ ansible_ssh_private_key_file }}.pub"
      when: vault_grunt_user is defined and ansible_ssh_private_key_file is defined and phase_mode != 'port_change'
      tags: [ssh, keys, grunt]
      
    # Phase 4: Firewall Setup (Early Protection) - conditional
    - name: Install UFW firewall (smart installation)
      include_tasks: "{{ task_paths }}/sys/firewall/install.yml"
      when: phase_mode != 'port_change'
      tags: [firewall, security]
      
    - name: Allow new SSH port in UFW firewall
      ufw:
        rule: allow
        port: "{{ target_ssh_port }}"
        proto: tcp
      when: phase_mode != 'no_port_change'
      tags: [firewall, ssh, security]
      
    - name: Enable UFW firewall immediately
      ufw:
        state: enabled
        logging: 'on'
        default: deny
      when: phase_mode != 'port_change'
      tags: [firewall, security]
      
    # Phase 5: SSH Security Configuration - conditional based on mode
    - name: Configure SSH port
      include_tasks: "{{ task_paths }}/sys/ssh/set-port.yml"
      vars:
        ssh_port: "{{ target_ssh_port }}"
      when: phase_mode != 'no_port_change'
      tags: [ssh, security]
      
    - name: Configure SSH security (root=keys-only, grunt=both)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
        - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication yes' }
        - { regexp: '^PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^ClientAliveInterval', line: 'ClientAliveInterval 300' }
        - { regexp: '^X11Forwarding', line: 'X11Forwarding no' }
        - { regexp: '^PermitTunnel', line: 'PermitTunnel no' }
      notify: restart ssh
      tags: [ssh, security]
      
    # Phase 6: Install Security Monitoring (only in full mode)
    - name: Install fail2ban for intrusion detection
      apt:
        name: fail2ban
        state: present
      when: phase_mode != 'port_change'
      tags: [security, monitoring]
      
    - name: Start and enable fail2ban
      service:
        name: fail2ban
        state: started
        enabled: true
      when: phase_mode != 'port_change'
      tags: [security, monitoring]
      
  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted
      
  post_tasks:
    - name: Display security setup completion
      debug:
        msg: |
          üéâ ‚úÖ ROCK-SOLID SECURITY SETUP COMPLETED! ({{ phase_mode }} mode)
          
          üìã Security Configuration:
             ‚îú‚îÄ‚îÄ Root Access: SSH keys ONLY (automation)
             ‚îú‚îÄ‚îÄ Grunt Access: {{ emergency_user if vault_grunt_user is defined else 'Not configured' }} {{ '(password + SSH keys)' if vault_grunt_user is defined else '' }}
             ‚îú‚îÄ‚îÄ SSH Port: {{ target_ssh_port }}
             ‚îú‚îÄ‚îÄ Firewall: {{ 'UFW enabled with strict rules' if phase_mode != 'port_change' else 'Previously configured' }}
             ‚îú‚îÄ‚îÄ Monitoring: {{ 'fail2ban active' if phase_mode != 'port_change' else 'Previously configured' }}
             ‚îî‚îÄ‚îÄ Connection: Use root for all automation
          
          üîê Security Status: ENTERPRISE-GRADE
          
          üöÄ Next Steps:
             ‚Ä¢ All automation continues as root (no connection switching)
             ‚Ä¢ Grunt access: {{ 'ssh ' + emergency_user + '@' + ansible_host + ':' + (target_ssh_port|string) if vault_grunt_user is defined else 'No grunt user configured - using root for all operations' }}
             ‚Ä¢ Deploy services: ./claudia base --install, ./claudia psql --install, etc.