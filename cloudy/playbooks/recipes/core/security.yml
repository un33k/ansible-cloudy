# Recipe: Rock-Solid Security Setup
# Purpose: Enterprise-grade security - Grunt User + Firewall + Monitoring
# Note: SSH hardening is now handled by harden.yml playbook
# Usage: ansible-playbook playbooks/recipes/core/security.yml -i inventory/hosts.yml

---
- name: Rock-Solid Server Security Setup
  hosts: security_targets
  gather_facts: true
  become: true
  
  vars_files:
    - "../../../defaults/all.yml"
    - "../../../defaults/vault.yml"
    - "../../../defaults/security.yml"
    - "../../../defaults/system.yml"
  
  vars:
    task_paths: "../../../tasks"
    emergency_user: "{{ grunt_user }}"    # Only set if vault_grunt_user is defined
    # Security setup after SSH hardening
    
  pre_tasks:
    # Check SSH connectivity first (for security, this might use password auth)
    - name: Verify SSH connectivity
      include_tasks: "{{ task_paths }}/sys/core/check-ssh-connectivity.yml"
      tags: [always]
    - name: Validate root connection for security setup
      fail:
        msg: |
          ‚ùå SECURITY SETUP ERROR: Must connect as root user!
          
          Security setup requires root access with SSH keys.
          
          Expected: ansible_user should be 'root'
          Actual: ansible_user is '{{ ansible_user }}'
          
          üîß Fix:
          1. Run './cli harden --install' first
          2. Then use: ./cli security --install
      when: ansible_user != 'root'
    
    - name: Display security setup information
      debug:
        msg: |
          üîê Starting Rock-Solid Security Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          Connection: {{ ansible_user }}@{{ ansible_host }}:{{ ansible_port }}
          
          Security Model:
          ‚îú‚îÄ‚îÄ Grunt User: {{ emergency_user if vault_grunt_user is defined else 'Not configured - Optional service user' }} {{ '(password + SSH keys)' if vault_grunt_user is defined else '' }}
          ‚îú‚îÄ‚îÄ Firewall: UFW enabled with strict rules
          ‚îî‚îÄ‚îÄ Monitoring: fail2ban for intrusion detection
          
  tasks:
    # Phase 1: SSH Authentication Hardening
    - name: Install SSH public key for root
      authorized_key:
        user: "{{ vault_root_user }}"
        key: "{{ lookup('file', vault_root_ssh_private_key_file + '.pub') }}"
        state: present
      when: vault_root_ssh_private_key_file is defined
      tags: [ssh, keys]
    
    - name: Configure SSH for secure authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: true
      loop:
        - regexp: '^#?PasswordAuthentication'
          line: "PasswordAuthentication no"
        - regexp: '^#?PermitRootLogin'
          line: 'PermitRootLogin prohibit-password'
        - regexp: '^#?PubkeyAuthentication'
          line: 'PubkeyAuthentication yes'
      notify: restart ssh
      tags: [ssh, security]
    
    - name: Validate SSH configuration
      command: sshd -t
      changed_when: false
      tags: [ssh, validate]
    
    # Phase 2: Foundation Setup
    - name: Update system packages
      include_tasks: "{{ task_paths }}/sys/core/update.yml"
      tags: [foundation, update]
      
    - name: Install common utilities
      include_tasks: "{{ task_paths }}/sys/core/install-common.yml"
      tags: [foundation, packages]
      
    # Phase 2: Create Optional Grunt Service User
    # Create groups before user creation
    - name: Create required groups for grunt user
      group:
        name: "{{ item }}"
        state: present
      loop:
        - www-data
        - docker
        - ssl-cert
      when: vault_grunt_user is defined
      tags: [users, grunt, groups]
    
    # Create grunt user first
    - name: Create grunt user ({{ emergency_user }})
      include_tasks: "{{ task_paths }}/sys/user/add-user.yml"
      vars:
        username: "{{ emergency_user }}"
      when: vault_grunt_user is defined
      tags: [users, grunt]
    
    # Then set exact group membership - user will be removed from any groups not listed
    - name: Set grunt user groups (exact membership)
      include_tasks: "{{ task_paths }}/sys/user/set-groups.yml"
      vars:
        username: "{{ emergency_user }}"
        groups_string: "{{ vault_grunt_groups | default(grunt_groups_string_default) }}"
      when: vault_grunt_user is defined
      tags: [users, grunt]
      
    - name: Set grunt user password
      include_tasks: "{{ task_paths }}/sys/user/change-password.yml"
      vars:
        username: "{{ emergency_user }}"
        password: "{{ grunt_password }}"
      when: vault_grunt_user is defined
      tags: [users, grunt, password]
      
    - name: Add grunt user to sudoers with NOPASSWD
      include_tasks: "{{ task_paths }}/sys/user/add-sudoer.yml"
      vars:
        username: "{{ emergency_user }}"
        nopasswd_sudo: true
      when: vault_grunt_user is defined
      tags: [users, grunt, sudo]
      
    - name: Install SSH public key for grunt user
      include_tasks: "{{ task_paths }}/sys/ssh/install-public-key.yml"
      vars:
        target_user: "{{ emergency_user }}"
        pub_key_path: "{{ ansible_ssh_private_key_file }}.pub"
      when: vault_grunt_user is defined and ansible_ssh_private_key_file is defined
      tags: [ssh, keys, grunt]
      
    # Phase 3: Firewall Setup
    - name: Install UFW firewall (smart installation)
      include_tasks: "{{ task_paths }}/sys/firewall/install.yml"
      tags: [firewall, security]
      
    - name: Allow SSH port in UFW firewall
      ufw:
        rule: allow
        port: "{{ vault_ssh_port }}"
        proto: tcp
      tags: [firewall, ssh, security]
      
    - name: Enable UFW firewall immediately
      ufw:
        state: enabled
        logging: 'on'
        default: deny
      tags: [firewall, security]
      
    # Phase 4: Install Security Monitoring
    - name: Install fail2ban for intrusion detection
      apt:
        name: fail2ban
        state: present
      tags: [security, monitoring]
      
    - name: Configure fail2ban SSH jail
      blockinfile:
        path: /etc/fail2ban/jail.local
        create: yes
        block: |
          [sshd]
          enabled = true
          port = {{ vault_ssh_port }}
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 4
          findtime = {{ fail2ban_findtime_default }}
          bantime = {{ fail2ban_bantime_default }}
          ignoreip = {{ fail2ban_ignoreip_default }}
      notify: restart fail2ban
      tags: [security, monitoring, fail2ban]
      
    - name: Start and enable fail2ban
      service:
        name: fail2ban
        state: started
        enabled: true
      tags: [security, monitoring]
      
  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted
        
    - name: restart fail2ban
      service:
        name: fail2ban
        state: restarted
      
  post_tasks:
    - name: Display security setup completion
      debug:
        msg: |
          üéâ ‚úÖ ROCK-SOLID SECURITY SETUP COMPLETED!
          
          üìã Security Configuration:
             ‚îú‚îÄ‚îÄ Grunt User: {{ emergency_user if vault_grunt_user is defined else 'Not configured' }} {{ '(with SSH keys)' if vault_grunt_user is defined else '' }}
             ‚îú‚îÄ‚îÄ Firewall: UFW enabled with strict rules
             ‚îú‚îÄ‚îÄ Monitoring: fail2ban active
             ‚îî‚îÄ‚îÄ Connection: Use root for all automation
          
          üîê Security Status: ENTERPRISE-GRADE
          
          üöÄ Next Steps:
             ‚Ä¢ Deploy services: ./cli base --install, ./cli psql --install, etc.