# Recipe: Rock-Solid Security Setup
# Purpose: Enterprise-grade security - Grunt User + Firewall + Monitoring
# Note: SSH hardening is now handled by harden.yml playbook
# Usage: ansible-playbook playbooks/recipes/core/security.yml -i inventory/hosts.yml

---
- name: Rock-Solid Server Security Setup
  hosts: security_targets
  gather_facts: true
  become: true
  
  vars_files:
    - "../../../defaults/all.yml"
    - "../../../defaults/security.yml"
    - "../../../defaults/system.yml"
  
  vars:
    task_paths: "../../../tasks"
    emergency_user: "{{ grunt_user }}"    # Only set if vault_grunt_user is defined
    # Security setup after SSH hardening
    
  pre_tasks:
    - name: Validate root connection for security setup
      fail:
        msg: |
          ❌ SECURITY SETUP ERROR: Must connect as root user!
          
          Security setup requires root access with SSH keys.
          
          Expected: ansible_user should be 'root'
          Actual: ansible_user is '{{ ansible_user }}'
          
          🔧 Fix:
          1. Run './cli harden --install' first
          2. Then use: ./cli security --install
      when: ansible_user != 'root'
    
    - name: Display security setup information
      debug:
        msg: |
          🔐 Starting Rock-Solid Security Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          Connection: {{ ansible_user }}@{{ ansible_host }}:{{ ansible_port }}
          
          Security Model:
          ├── Grunt User: {{ emergency_user if vault_grunt_user is defined else 'Not configured - Optional service user' }} {{ '(password + SSH keys)' if vault_grunt_user is defined else '' }}
          ├── Firewall: UFW enabled with strict rules
          └── Monitoring: fail2ban for intrusion detection
          
  tasks:
    # Phase 1: Foundation Setup
    - name: Update system packages
      include_tasks: "{{ task_paths }}/sys/core/update.yml"
      tags: [foundation, update]
      
    - name: Install common utilities
      include_tasks: "{{ task_paths }}/sys/core/install-common.yml"
      tags: [foundation, packages]
      
    # Phase 2: Create Optional Grunt Service User
    - name: Create grunt user ({{ emergency_user }})
      include_tasks: "{{ task_paths }}/sys/user/add-user.yml"
      vars:
        username: "{{ emergency_user }}"
      when: vault_grunt_user is defined
      tags: [users, grunt]
      
    - name: Set grunt user password
      include_tasks: "{{ task_paths }}/sys/user/change-password.yml"
      vars:
        username: "{{ emergency_user }}"
        password: "{{ grunt_password }}"
      when: vault_grunt_user is defined
      tags: [users, grunt, password]
      
    - name: Add grunt user to sudoers with NOPASSWD
      include_tasks: "{{ task_paths }}/sys/user/add-sudoer.yml"
      vars:
        username: "{{ emergency_user }}"
        nopasswd_sudo: true
      when: vault_grunt_user is defined
      tags: [users, grunt, sudo]
      
    - name: Install SSH public key for grunt user
      include_tasks: "{{ task_paths }}/sys/ssh/install-public-key.yml"
      vars:
        target_user: "{{ emergency_user }}"
        pub_key_path: "{{ ansible_ssh_private_key_file }}.pub"
      when: vault_grunt_user is defined and ansible_ssh_private_key_file is defined
      tags: [ssh, keys, grunt]
      
    # Phase 3: Firewall Setup
    - name: Install UFW firewall (smart installation)
      include_tasks: "{{ task_paths }}/sys/firewall/install.yml"
      tags: [firewall, security]
      
    - name: Allow SSH port in UFW firewall
      ufw:
        rule: allow
        port: "{{ vault_ssh_port_final }}"
        proto: tcp
      tags: [firewall, ssh, security]
      
    - name: Enable UFW firewall immediately
      ufw:
        state: enabled
        logging: 'on'
        default: deny
      tags: [firewall, security]
      
    # Phase 4: Install Security Monitoring
    - name: Install fail2ban for intrusion detection
      apt:
        name: fail2ban
        state: present
      tags: [security, monitoring]
      
    - name: Start and enable fail2ban
      service:
        name: fail2ban
        state: started
        enabled: true
      tags: [security, monitoring]
      
  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted
      
  post_tasks:
    - name: Display security setup completion
      debug:
        msg: |
          🎉 ✅ ROCK-SOLID SECURITY SETUP COMPLETED!
          
          📋 Security Configuration:
             ├── Grunt User: {{ emergency_user if vault_grunt_user is defined else 'Not configured' }} {{ '(with SSH keys)' if vault_grunt_user is defined else '' }}
             ├── Firewall: UFW enabled with strict rules
             ├── Monitoring: fail2ban active
             └── Connection: Use root for all automation
          
          🔐 Security Status: ENTERPRISE-GRADE
          
          🚀 Next Steps:
             • Deploy services: ./cli base --install, ./cli psql --install, etc.