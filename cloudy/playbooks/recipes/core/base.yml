# Recipe: Core Server Setup
# Purpose: Basic server configuration - runs after security.yml on all servers
# Prerequisites: Must run core/security.yml first
# Usage: ansible-playbook playbooks/recipes/core/base.yml -i inventory/hosts.yml

---
- name: Core Server Setup
  hosts: service_targets
  gather_facts: true
  become: true
  
  vars_files:
    - "../../../defaults/all.yml"
    - "../../../defaults/system.yml"
  
  vars:
    task_paths: "../../../tasks"
    # Base system configuration (configurable via inventory)
    setup_swap: false
    perform_system_upgrade: true  # Set to false to skip system updates
          
  pre_tasks:
    # Ensure proper secure connection
    - name: Validate secure connection
      include_tasks: "{{ task_paths }}/sys/core/ensure-secure-connection.yml"
          
  tasks:
    # System Initialization
    - name: Initialize system
      include_tasks: "{{ task_paths }}/sys/core/init.yml"
      tags: [system, init]
      
    # System Updates
    - name: Perform safe system upgrade
      include_tasks: "{{ task_paths }}/sys/core/safe-upgrade.yml"
      vars:
        reboot_after_upgrade: false  # Don't reboot during base setup
      when: perform_system_upgrade | default(true) | bool
      tags: [system, update, upgrade]
      
    # Hostname Configuration
    - name: Configure hostname
      include_tasks: "{{ task_paths }}/sys/core/hostname.yml"
      vars:
        target_hostname: "{{ hostname }}"
      tags: [system, hostname]
      
    # Git Configuration
    - name: Install git
      include_tasks: "{{ task_paths }}/sys/core/install-git.yml"
      tags: [system, git]
      
    - name: Configure git for root
      include_tasks: "{{ task_paths }}/sys/core/configure-git.yml"
      vars:
        target_user: root
        git_name: "{{ git_user_full_name }}"
        git_email: "{{ git_user_email }}"
      tags: [system, git]
      
    - name: Configure git for grunt user
      include_tasks: "{{ task_paths }}/sys/core/configure-git.yml"
      vars:
        target_user: "{{ grunt_user }}"
        git_name: "{{ git_user_full_name }}"
        git_email: "{{ git_user_email }}"
      when: vault_grunt_user is defined
      tags: [users, grunt, git]
      
    # Firewall Setup (additional rules beyond SSH)
    - name: Secure server with firewall
      include_tasks: "{{ task_paths }}/sys/firewall/secure-server.yml"
      tags: [firewall, security]
      
    # System Configuration
    - name: Configure timezone
      include_tasks: "{{ task_paths }}/sys/timezone/configure.yml"
      tags: [system, timezone]
      
    - name: Configure swap
      include_tasks: "{{ task_paths }}/sys/swap/configure.yml"
      when: setup_swap | bool
      tags: [system, swap]
      
    # Security Hardening (additional packages)
    - name: Install security packages
      include_tasks: "{{ task_paths }}/sys/security/install-common.yml"
      when: setup_security | default(true) | bool
      tags: [security, packages]
      
    # Docker Installation
    - name: Install Docker Engine
      include_tasks: "{{ task_paths }}/sys/docker/install.yml"
      tags: [docker, containers]
      
    - name: Add grunt user to docker group
      user:
        name: "{{ grunt_user }}"
        groups: docker
        append: true
      when: vault_grunt_user is defined
      tags: [docker, grunt]
      
    # Service User Configuration
    - name: Configure base service directories for grunt user
      include_tasks: "{{ task_paths }}/sys/services/configure-service-user.yml"
      vars:
        service_name: "base-services"
        service_directories:
          - "/opt/services"
          - "/var/log/services"
          - "/var/run/services"
      when: vault_grunt_user is defined
      tags: [services, grunt]
      
    # Final Validation
    - name: Validate grunt user access and configuration
      include_tasks: "{{ task_paths }}/sys/core/validate-grunt-access.yml"
      vars:
        grunt_password: "{{ grunt_password }}"
      when: vault_grunt_user is defined
      tags: [validation, grunt]
      
  post_tasks:
    - name: Display completion summary
      debug:
        msg: |
          ðŸŽ‰ âœ… CORE SERVER SETUP COMPLETED!
          
          ðŸ“‹ Configuration Summary:
             â”œâ”€â”€ Hostname: {{ hostname }}
             â”œâ”€â”€ Timezone: {{ timezone }}
             â”œâ”€â”€ System Updates: Applied (safe-upgrade)
             â”œâ”€â”€ Grunt User: {{ grunt_user if vault_grunt_user is defined else 'Not configured' }}
             â”œâ”€â”€ SSH Port: {{ ansible_port }}
             â”œâ”€â”€ Firewall: UFW enabled
             â”œâ”€â”€ Git: Configured
             â”œâ”€â”€ Docker: Installed and configured
             â””â”€â”€ Service Directories: {{ 'Created for grunt user' if vault_grunt_user is defined else 'Standard root-based' }}
          
          ðŸš€ Core server foundation ready for service deployments!
          
          ðŸ“š Next Steps:
             â€¢ Deploy services: ./cli psql --install, ./cli django --install, etc.
             â€¢ Service User Mode: {{ 'Grunt user (' + grunt_user + ') for service processes' if vault_grunt_user is defined else 'Root user for all operations' }}
             â€¢ All automation continues as root with SSH key authentication