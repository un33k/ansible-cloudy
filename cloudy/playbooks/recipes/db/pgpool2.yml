# Recipe: PgPool-II Connection Pooling for PostgreSQL
# Purpose: Install and configure pgpool2 for connection pooling
# Usage: ansible-playbook playbooks/recipes/db/pgpool2.yml -i inventory/hosts.yml

---
- name: PgPool-II Connection Pooler Setup
  hosts: service_targets
  gather_facts: true
  become: true
  
  vars:
    task_paths: "../../../tasks"
    # PgPool Configuration
    pgpool_listen_port: "{{ pgpool2_port | default(vault_pgpool2_port | default(5432)) }}"
    pgpool_backend_host: "{{ postgres_host | default('localhost') }}"
    pgpool_backend_port: "{{ postgres_port | default(5433) }}"
    
    # Pool Settings
    pgpool_num_init_children: "{{ pool_children | default(32) }}"
    pgpool_max_pool: "{{ pool_size | default(4) }}"
    
  pre_tasks:
    # Ensure proper secure connection
    - name: Validate secure connection
      include_tasks: "{{ task_paths }}/sys/core/ensure-secure-connection.yml"
      tags: [validation, security]
    
    - name: Display PgPool2 setup information
      debug:
        msg: |
          ðŸš€ Starting PgPool-II Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          Listen Port: {{ pgpool_listen_port }}
          Backend: {{ pgpool_backend_host }}:{{ pgpool_backend_port }}
          Pool Size: {{ pgpool_num_init_children }} Ã— {{ pgpool_max_pool }} = {{ pgpool_num_init_children | int * pgpool_max_pool | int }} connections
          
  tasks:
    # Install PgPool2
    - name: Install PgPool-II
      include_tasks: "{{ task_paths }}/db/pgpool2/install.yml"
      tags: [pgpool2, install]
      
    # Configure PgPool2
    - name: Configure PgPool-II
      include_tasks: "{{ task_paths }}/db/pgpool2/configure.yml"
      vars:
        backend_host: "{{ pgpool_backend_host }}"
        backend_port: "{{ pgpool_backend_port }}"
        pgpool_port: "{{ pgpool_listen_port }}"
        num_init_children: "{{ pgpool_num_init_children }}"
        max_pool: "{{ pgpool_max_pool }}"
      tags: [pgpool2, configure]
      
    # Configure backends
    - name: Configure PgPool2 backends
      include_tasks: "{{ task_paths }}/db/pgpool2/configure-backends.yml"
      vars:
        backend_host: "{{ pgpool_backend_host }}"
        backend_port: "{{ pgpool_backend_port }}"
      tags: [pgpool2, backends]
      
    # Start service
    - name: Start PgPool2 service
      include_tasks: "{{ task_paths }}/db/pgpool2/start.yml"
      tags: [pgpool2, service]
      
    # Health check
    - name: Perform health check
      include_tasks: "{{ task_paths }}/db/pgpool2/health-check.yml"
      tags: [pgpool2, health]
      
    # Firewall configuration
    - name: Allow PgPool2 through firewall
      include_tasks: "{{ task_paths }}/sys/firewall/allow-port.yml"
      vars:
        port: "{{ pgpool_listen_port }}"
        proto: tcp
      tags: [firewall, pgpool2]
      
  handlers:
    - name: restart pgpool2
      service:
        name: pgpool2
        state: restarted
        
  post_tasks:
    - name: Display PgPool2 setup completion
      debug:
        msg: |
          ðŸŽ‰ âœ… PGPOOL-II SETUP COMPLETED SUCCESSFULLY!
          
          ðŸ“‹ Configuration Summary:
             â”œâ”€â”€ Status: Active and accepting connections
             â”œâ”€â”€ Listen Port: {{ pgpool_listen_port }}
             â”œâ”€â”€ Backend Server: {{ pgpool_backend_host }}:{{ pgpool_backend_port }}
             â”œâ”€â”€ Connection Pool: {{ pgpool_num_init_children }} Ã— {{ pgpool_max_pool }} = {{ pgpool_num_init_children | int * pgpool_max_pool | int }} total
             â”œâ”€â”€ Socket Directory: /var/run/postgresql
             â””â”€â”€ Log Directory: /var/log/pgpool
          
          ðŸš€ PgPool-II is ready for connections!
          
          ðŸ“– Connection Information:
          Applications should connect to:
          - Host: {{ ansible_host }}
          - Port: {{ pgpool_listen_port }}
          - Database: [your_database]
          - User: [your_user]
          
          ðŸ“– Testing Connection:
          psql -h {{ ansible_host }} -p {{ pgpool_listen_port }} -U postgres -c "SHOW pool_nodes;"
          
          ðŸ“– Next Steps:
          1. Configure your applications to use PgPool2 port
          2. Monitor connection pooling with: SHOW pool_pools;
          3. Check backend status with: SHOW pool_nodes;
          4. Configure pgpool authentication if needed