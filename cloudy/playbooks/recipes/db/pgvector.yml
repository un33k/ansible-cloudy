# Recipe: PostgreSQL with pgvector Extension for Vector Databases
# Purpose: PostgreSQL with pgvector for AI/ML embedding storage and similarity search
# Usage: ./claudia pgvector --install [--port 5432]

---
# PostgreSQL with pgvector setup
- name: PostgreSQL with pgvector Extension Setup
  hosts: service_targets
  gather_facts: true
  become: true
  
  vars_files:
    - "../../../defaults/all.yml"
    - "../../../defaults/postgresql.yml"
  
  vars:
    task_paths: "../../../tasks"
    # PostgreSQL configuration
    setup_postgresql: true
    setup_pgvector: true
    
    # Apply defaults with vault override pattern
    pg_version: "{{ vault_pg_version | default(pg_version_default) }}"
    pg_port: "{{ vault_pg_port | default(pg_port_default) }}"
    pg_databases: "{{ vault_pg_databases | default([]) }}"
    pg_users: "{{ vault_pg_users | default([]) }}"
    pgvector_version: "{{ vault_pgvector_version | default('v0.5.1') }}"
    
    # pgvector specific settings
    pg_max_connections: "{{ vault_pg_max_connections | default(200) }}"
    pg_shared_buffers_mb: "{{ vault_pg_shared_buffers_mb | default((ansible_memtotal_mb * 0.25) | int) }}"
    pg_work_mem_mb: "{{ vault_pg_work_mem_mb | default(16) }}"
    pg_maintenance_work_mem_mb: "{{ vault_pg_maintenance_work_mem_mb | default(512) }}"
    
  pre_tasks:
    # Ensure proper secure connection
    - name: Validate secure connection
      include_tasks: "{{ task_paths }}/sys/core/ensure-secure-connection.yml"
    
    - name: Display PostgreSQL with pgvector setup information
      debug:
        msg: |
          🗄️  PostgreSQL with pgvector Extension Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          
          📋 Prerequisites:
          ├── ✅ Security Setup (run separately: ./claudia security --install)
          ├── ✅ Base Configuration (run separately: ./claudia base --install)
          └── 🔄 PostgreSQL + pgvector Installation (current phase)
          
          🗄️  Database Configuration:
          ├── PostgreSQL: v{{ pg_version }}
          ├── Port: {{ pg_port }}
          ├── pgvector: {{ pgvector_version }}
          ├── Shared Buffers: {{ pg_shared_buffers_mb }}MB
          ├── Work Memory: {{ pg_work_mem_mb }}MB
          └── Max Connections: {{ pg_max_connections }}
          
          🧠 Vector Database Features:
          ├── Embedding Storage: Up to 16,000 dimensions
          ├── Distance Functions: L2, Inner Product, Cosine
          ├── Indexing: IVFFlat and HNSW
          └── Use Cases: AI/ML, Similarity Search, RAG
          
  tasks:
    # =============================================================================
    # POSTGRESQL DATABASE SETUP
    # =============================================================================
      
    # PostgreSQL Setup
    - name: Install PostgreSQL repository
      include_tasks: "{{ task_paths }}/db/postgresql/install-repo.yml"
      when: setup_postgresql | bool
      tags: [postgresql, repo]
      
    - name: Install PostgreSQL server
      include_tasks: "{{ task_paths }}/db/postgresql/install.yml"
      when: setup_postgresql | bool
      tags: [postgresql, install]
      
    - name: Configure PostgreSQL port
      include_tasks: "{{ task_paths }}/db/postgresql/configure-port.yml"
      when: setup_postgresql | bool
      tags: [postgresql, config]
      
    # pgvector specific configuration
    - name: Apply pgvector-optimized PostgreSQL configuration
      blockinfile:
        path: /etc/postgresql/{{ pg_version }}/main/postgresql.conf
        marker: "# {mark} ANSIBLE MANAGED - pgvector optimization"
        block: |
          # pgvector performance optimization
          shared_buffers = {{ pg_shared_buffers_mb }}MB
          work_mem = {{ pg_work_mem_mb }}MB
          maintenance_work_mem = {{ pg_maintenance_work_mem_mb }}MB
          max_connections = {{ pg_max_connections }}
          
          # For vector similarity searches
          effective_cache_size = {{ (ansible_memtotal_mb * 0.75) | int }}MB
          random_page_cost = 1.1  # SSD optimization
          
          # Parallel query execution for vector operations
          max_parallel_workers_per_gather = {{ [(ansible_processor_vcpus / 2) | int, 4] | min }}
          max_parallel_workers = {{ ansible_processor_vcpus }}
          max_parallel_maintenance_workers = {{ [(ansible_processor_vcpus / 2) | int, 2] | max }}
          
          # Enable JIT for vector operations (PostgreSQL 11+)
          {% if pg_version | int >= 11 %}
          jit = on
          jit_above_cost = 100000
          {% endif %}
      notify: restart postgresql
      tags: [postgresql, config, pgvector]
      
    # Install pgvector extension
    - name: Install pgvector extension
      include_tasks: "{{ task_paths }}/db/postgresql/install-pgvector.yml"
      when: setup_postgresql | bool and setup_pgvector | bool
      tags: [postgresql, pgvector, install]
      
    # Create databases with vector extension
    - name: Create PostgreSQL databases
      include_tasks: "{{ task_paths }}/db/postgresql/create-database.yml"
      vars:
        database: "{{ item.name }}"
        owner: "{{ item.owner }}"
        encoding: "{{ item.encoding | default('UTF8') }}"
        locale: "{{ item.locale | default('en_US.UTF-8') }}"
      loop: "{{ pg_databases }}"
      when: setup_postgresql | bool and pg_databases is defined
      tags: [postgresql, databases]
      
    - name: Enable pgvector in databases
      postgresql_ext:
        name: vector
        db: "{{ item.name }}"
        state: present
      become_user: postgres
      loop: "{{ pg_databases }}"
      when: 
        - setup_postgresql | bool 
        - setup_pgvector | bool
        - pg_databases is defined
      tags: [postgresql, pgvector, databases]
      
    # Create users
    - name: Create PostgreSQL users
      include_tasks: "{{ task_paths }}/db/postgresql/create-user.yml"
      vars:
        username: "{{ item.name }}"
        password: "{{ item.password }}"
      loop: "{{ pg_users }}"
      when: setup_postgresql | bool and pg_users is defined
      tags: [postgresql, users]
      
    - name: Grant PostgreSQL privileges
      include_tasks: "{{ task_paths }}/db/postgresql/grant-privileges.yml"
      vars:
        database: "{{ item.database }}"
        username: "{{ item.name }}"
        privileges: "{{ item.privileges | default('ALL') }}"
      loop: "{{ pg_users }}"
      when: setup_postgresql | bool and pg_users is defined and item.database is defined
      tags: [postgresql, privileges]
      
    # Create example vector schema
    - name: Create example vector schema
      postgresql_query:
        db: "{{ pg_databases[0].name if pg_databases is defined and pg_databases|length > 0 else 'postgres' }}"
        query: |
          -- Example embedding table for AI/ML applications
          CREATE TABLE IF NOT EXISTS embeddings (
            id BIGSERIAL PRIMARY KEY,
            content TEXT,
            embedding vector(1536),  -- OpenAI ada-002 dimension
            metadata JSONB,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Create indexes for similarity search
          CREATE INDEX IF NOT EXISTS embeddings_embedding_idx 
          ON embeddings USING ivfflat (embedding vector_l2_ops)
          WITH (lists = 100);
          
          -- Example: Semantic search function
          CREATE OR REPLACE FUNCTION search_similar(
            query_embedding vector(1536),
            limit_n INT DEFAULT 10
          )
          RETURNS TABLE(
            id BIGINT,
            content TEXT,
            similarity FLOAT,
            metadata JSONB
          )
          LANGUAGE sql
          AS $$
            SELECT 
              id,
              content,
              1 - (embedding <=> query_embedding) as similarity,
              metadata
            FROM embeddings
            ORDER BY embedding <=> query_embedding
            LIMIT limit_n;
          $$;
      become_user: postgres
      when: pg_create_example_schema | default(true)
      tags: [postgresql, pgvector, schema]
      
    # Firewall Configuration
    - name: Allow PostgreSQL through firewall
      include_tasks: "{{ task_paths }}/sys/firewall/allow-postgresql.yml"
      when: setup_postgresql | bool
      tags: [firewall, postgresql]
      
    # Performance validation
    - name: Validate pgvector performance settings
      postgresql_query:
        db: postgres
        query: |
          SELECT 
            name, 
            setting, 
            unit 
          FROM pg_settings 
          WHERE name IN (
            'shared_buffers', 
            'work_mem', 
            'maintenance_work_mem',
            'max_parallel_workers',
            'jit'
          );
      become_user: postgres
      register: pgvector_settings
      tags: [postgresql, pgvector, validation]
      
  post_tasks:
    - name: Create pgvector usage guide
      copy:
        dest: /root/pgvector-guide.txt
        content: |
          === PostgreSQL pgvector Usage Guide ===
          
          Connection:
          psql -h {{ ansible_host }} -p {{ pg_port }} -U postgres
          
          Basic Usage:
          -- Create a vector column
          CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));
          
          -- Insert vectors
          INSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]');
          
          -- Find nearest neighbors (L2 distance)
          SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;
          
          -- Cosine similarity
          SELECT * FROM items ORDER BY embedding <=> '[3,1,2]' LIMIT 5;
          
          -- Inner product
          SELECT * FROM items ORDER BY embedding <#> '[3,1,2]' LIMIT 5;
          
          Indexing for Performance:
          -- IVFFlat index (good for < 1M vectors)
          CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);
          
          -- HNSW index (better recall, more memory)
          CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);
          
          Python Example:
          import psycopg2
          import numpy as np
          from pgvector.psycopg2 import register_vector
          
          conn = psycopg2.connect("host={{ ansible_host }} port={{ pg_port }} dbname=mydb")
          register_vector(conn)
          
          embedding = np.random.rand(1536).tolist()
          cur = conn.cursor()
          cur.execute("INSERT INTO embeddings (content, embedding) VALUES (%s, %s)", 
                      ("Sample text", embedding))
          conn.commit()
      
    - name: Display PostgreSQL pgvector completion summary
      debug:
        msg: |
          🎉 ✅ POSTGRESQL WITH PGVECTOR SETUP COMPLETED SUCCESSFULLY!
          
          📋 Configuration Summary:
             ├── Server: {{ inventory_hostname }} ({{ ansible_host }})
             ├── PostgreSQL: v{{ pg_version }} on port {{ pg_port }}
             ├── pgvector: {{ pgvector_version }} installed
             ├── Databases: {{ pg_databases | length if pg_databases is defined else 0 }} created with vector support
             ├── Users: {{ pg_users | length if pg_users is defined else 0 }} created
             └── Firewall: PostgreSQL port {{ pg_port }} configured
          
          🧠 Vector Database Ready:
             ├── Max Dimensions: 16,000
             ├── Distance Functions: L2 (<->), Cosine (<=>), Inner Product (<#>)
             ├── Index Types: IVFFlat, HNSW
             ├── Performance: Optimized for {{ ansible_memtotal_mb }}MB RAM
             └── Usage Guide: /root/pgvector-guide.txt
          
          📊 Performance Settings:
          {% for setting in pgvector_settings.query_result %}
          {{ setting.name }}: {{ setting.setting }}{{ setting.unit if setting.unit else '' }}
          {% endfor %}
          
          🚀 Ready for AI/ML Applications!
             └── Connection: psql -h {{ ansible_host }} -p {{ pg_port }} -U postgres
             
  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted