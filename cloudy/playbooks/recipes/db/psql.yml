# Recipe: PostgreSQL Database Server with PostGIS Support
# Purpose: Orchestrates security, base setup, and PostgreSQL installation
# Usage: ./ali psql --install [--pgis] [--port 5433]

---
# Import prerequisite playbooks - security first
- import_playbook: ../core/security.yml

# Import base configuration
- import_playbook: ../core/base.yml

# PostgreSQL-specific setup
- name: PostgreSQL Database Server Setup
  hosts: all
  gather_facts: true
  become: true
  
  vars:
    task_paths: "../../../tasks"
    # PostgreSQL configuration
    setup_postgresql: true
    setup_postgis: false
    postgresql_version: "17"
    database_port: 5432
    postgis_version: "3"
    
  pre_tasks:
    - name: Display PostgreSQL setup information
      debug:
        msg: |
          🗄️  PostgreSQL Database Server Setup
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          
          📋 Setup Phases:
          ├── ✅ Security Setup (completed via import)
          ├── ✅ Base Configuration (completed via import)
          └── 🔄 PostgreSQL Installation (in progress)
          
          🗄️  Database Configuration:
          ├── PostgreSQL: v{{ postgresql_version }}
          ├── Port: {{ database_port }}
          ├── PostGIS: {{ 'Yes (v' + postgis_version + ')' if setup_postgis else 'No' }}
          └── Firewall: PostgreSQL port configured
          
  tasks:
    # =============================================================================
    # POSTGRESQL DATABASE SETUP
    # =============================================================================
      
    # PostgreSQL Setup
    - name: Install PostgreSQL repository
      include_tasks: "{{ task_paths }}/db/postgresql/install-repo.yml"
      when: setup_postgresql | bool
      tags: [postgresql, repo]
      
    - name: Install PostgreSQL server
      include_tasks: "{{ task_paths }}/db/postgresql/install.yml"
      vars:
        pg_version: "{{ postgresql_version }}"
      when: setup_postgresql | bool
      tags: [postgresql, install]
      
    - name: Install PostGIS extension
      include_tasks: "{{ task_paths }}/db/postgresql/install-postgis.yml"
      vars:
        pg_version: "{{ postgresql_version }}"
        postgis_version: "{{ postgis_version }}"
      when: setup_postgresql | bool and setup_postgis | bool
      tags: [postgresql, postgis, install]
      
    - name: Configure PostgreSQL port
      include_tasks: "{{ task_paths }}/db/postgresql/configure-port.yml"
      vars:
        pg_port: "{{ database_port }}"
      when: setup_postgresql | bool
      tags: [postgresql, config]
      
    - name: Create PostgreSQL databases
      include_tasks: "{{ task_paths }}/db/postgresql/create-database.yml"
      vars:
        database: "{{ item.name }}"
        owner: "{{ item.owner }}"
        encoding: "{{ item.encoding | default('UTF8') }}"
        locale: "{{ item.locale | default('en_US.UTF-8') }}"
      loop: "{{ pg_databases }}"
      when: setup_postgresql | bool and pg_databases is defined
      tags: [postgresql, databases]
      
    - name: Create PostgreSQL users
      include_tasks: "{{ task_paths }}/db/postgresql/create-user.yml"
      vars:
        username: "{{ item.name }}"
        password: "{{ item.password }}"
      loop: "{{ pg_users }}"
      when: setup_postgresql | bool and pg_users is defined
      tags: [postgresql, users]
      
    - name: Grant PostgreSQL privileges
      include_tasks: "{{ task_paths }}/db/postgresql/grant-privileges.yml"
      vars:
        database: "{{ item.database }}"
        username: "{{ item.name }}"
        privileges: "{{ item.privileges | default('ALL') }}"
      loop: "{{ pg_users }}"
      when: setup_postgresql | bool and pg_users is defined and item.database is defined
      tags: [postgresql, privileges]
      
      
    # Firewall Configuration
    - name: Allow PostgreSQL through firewall
      include_tasks: "{{ task_paths }}/sys/firewall/allow-postgresql.yml"
      vars:
        pg_port: "{{ database_port }}"
      when: setup_postgresql | bool
      tags: [firewall, postgresql]
      
  post_tasks:
    - name: Display PostgreSQL completion summary
      debug:
        msg: |
          🎉 ✅ POSTGRESQL SERVER SETUP COMPLETED SUCCESSFULLY!
          📋 Configuration Summary:
             ├── Server: {{ inventory_hostname }} ({{ ansible_host }})
             ├── PostgreSQL: v{{ postgresql_version }} installed on port {{ database_port }}
             ├── PostGIS: {{ 'v' + postgis_version + ' extension installed' if setup_postgis else 'Not installed' }}
             ├── Databases: {{ pg_databases | length if pg_databases is defined else 0 }} created
             ├── Users: {{ pg_users | length if pg_users is defined else 0 }} created
             └── Firewall: PostgreSQL port {{ database_port }} configured
          
          🚀 PostgreSQL server is ready for applications!
             └── Connection: psql -h {{ ansible_host }} -p {{ database_port }} -U postgres
             
  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted