# Recipe: PgBouncer Connection Pooler for Web Servers
# Purpose: Install pgbouncer on existing web servers for local connection pooling
# Architecture: Web App ‚Üí PgBouncer (localhost:6432) ‚Üí PostgreSQL (db-server:5432)
# Usage: ansible-playbook playbooks/recipes/services/pgbouncer.yml -i inventory/hosts.yml

---
- name: PgBouncer Connection Pooler Setup (Web Server Installation)
  hosts: web_servers
  gather_facts: true
  become: true
  
  vars:
    task_paths: "../../../tasks"
    # PgBouncer Configuration
    pgbouncer_listen_port: "{{ vault_pgbouncer_port | default(6432) }}"
    pgbouncer_listen_addr: "127.0.0.1"  # Local only on web server
    
    # Backend Database Configuration
    pgbouncer_db_host: "{{ database_host | default('db.internal') }}"
    pgbouncer_db_port: "{{ vault_postgresql_port | default(5432) }}"
    pgbouncer_db_name: "{{ database_name | default('postgres') }}"
    pgbouncer_db_user: "{{ database_user | default('postgres') }}"
    
    # Pool Settings (conservative defaults for web servers)
    pgbouncer_default_pool_size: "{{ pool_size | default(5) }}"
    pgbouncer_max_db_connections: "{{ max_db_connections | default(10) }}"
    pgbouncer_max_client_conn: "{{ max_client_connections | default(100) }}"
    
  pre_tasks:
    # Ensure proper secure connection
    - name: Validate secure connection
      include_tasks: "{{ task_paths }}/sys/core/ensure-secure-connection.yml"
      tags: [validation, security]
    
    - name: Validate database password is set
      fail:
        msg: |
          ‚ùå Database password not configured!
          Please set vault_postgres_password in your vault file
      when: vault_postgres_password is not defined
    
    - name: Display PgBouncer setup information
      debug:
        msg: |
          üöÄ Starting PgBouncer Setup on Web Servers
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          
          üìã Configuration:
          ‚îú‚îÄ‚îÄ Listen: localhost:{{ pgbouncer_listen_port }}
          ‚îú‚îÄ‚îÄ Backend: {{ pgbouncer_db_host }}:{{ pgbouncer_db_port }}
          ‚îú‚îÄ‚îÄ Database: {{ pgbouncer_db_name }}
          ‚îú‚îÄ‚îÄ Pool Size: {{ pgbouncer_default_pool_size }} (max {{ pgbouncer_max_db_connections }})
          ‚îî‚îÄ‚îÄ Max Clients: {{ pgbouncer_max_client_conn }}
          
  tasks:
    # Install PgBouncer
    - name: Install PgBouncer
      include_tasks: "{{ task_paths }}/services/pgbouncer/install.yml"
      tags: [pgbouncer, install]
      
    # Configure PgBouncer
    - name: Configure PgBouncer
      include_tasks: "{{ task_paths }}/services/pgbouncer/configure.yml"
      vars:
        database_host: "{{ pgbouncer_db_host }}"
        database_port: "{{ pgbouncer_db_port }}"
        database_name: "{{ pgbouncer_db_name }}"
        database_user: "{{ pgbouncer_db_user }}"
        database_password: "{{ vault_postgres_password }}"
        pool_size: "{{ pgbouncer_default_pool_size }}"
        max_db_connections: "{{ pgbouncer_max_db_connections }}"
        max_client_connections: "{{ pgbouncer_max_client_conn }}"
      tags: [pgbouncer, configure]
      
    # Configure authentication
    - name: Configure PgBouncer authentication
      include_tasks: "{{ task_paths }}/services/pgbouncer/configure-auth.yml"
      vars:
        database_user: "{{ pgbouncer_db_user }}"
        database_password: "{{ vault_postgres_password }}"
      tags: [pgbouncer, auth]
      
    # Start service
    - name: Start PgBouncer service
      include_tasks: "{{ task_paths }}/services/pgbouncer/start.yml"
      tags: [pgbouncer, service]
      
    # Health check
    - name: Perform health check
      include_tasks: "{{ task_paths }}/services/pgbouncer/health-check.yml"
      vars:
        database_name: "{{ pgbouncer_db_name }}"
        database_user: "{{ pgbouncer_db_user }}"
        database_password: "{{ vault_postgres_password }}"
      tags: [pgbouncer, health]
      
  handlers:
    - name: restart pgbouncer
      service:
        name: pgbouncer
        state: restarted
        
  post_tasks:
    - name: Display PgBouncer setup completion
      debug:
        msg: |
          üéâ ‚úÖ PGBOUNCER SETUP COMPLETED SUCCESSFULLY!
          
          üìã Configuration Summary:
             ‚îú‚îÄ‚îÄ Installation: Web server (local pooling)
             ‚îú‚îÄ‚îÄ Status: Active and accepting connections
             ‚îú‚îÄ‚îÄ Listen: localhost:{{ pgbouncer_listen_port }}
             ‚îú‚îÄ‚îÄ Backend: {{ pgbouncer_db_host }}:{{ pgbouncer_db_port }}
             ‚îú‚îÄ‚îÄ Pool Size: {{ pgbouncer_default_pool_size }} √ó {{ pgbouncer_max_db_connections }} = {{ pgbouncer_default_pool_size | int * pgbouncer_max_db_connections | int }} max
             ‚îî‚îÄ‚îÄ Mode: Transaction pooling (most efficient)
          
          üöÄ Connection pooling is now active!
          
          üìñ Application Configuration:
          Update your application database connection to:
          - Host: localhost (or 127.0.0.1)
          - Port: {{ pgbouncer_listen_port }}
          - Database: {{ pgbouncer_db_name }}
          - User: {{ pgbouncer_db_user }}
          
          Example Django settings:
          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.postgresql',
                  'HOST': 'localhost',
                  'PORT': '{{ pgbouncer_listen_port }}',
                  'NAME': '{{ pgbouncer_db_name }}',
                  'USER': '{{ pgbouncer_db_user }}',
                  'PASSWORD': os.environ.get('DB_PASSWORD'),
              }
          }
          
          üìñ Monitoring:
          - Check pools: psql -h localhost -p {{ pgbouncer_listen_port }} -U postgres pgbouncer -c "SHOW POOLS;"
          - Check clients: psql -h localhost -p {{ pgbouncer_listen_port }} -U postgres pgbouncer -c "SHOW CLIENTS;"
          - Check stats: psql -h localhost -p {{ pgbouncer_listen_port }} -U postgres pgbouncer -c "SHOW STATS;"