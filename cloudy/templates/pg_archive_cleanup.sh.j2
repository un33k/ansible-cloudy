#!/bin/bash
# {{ ansible_managed }}
# PostgreSQL Archive Cleanup Script - Cloudy

set -euo pipefail

# Configuration
ARCHIVE_DIR="/var/lib/postgresql/archive"
BACKUP_DIR="/var/lib/postgresql/backups"
LOG_FILE="/var/log/postgresql/archive-cleanup.log"
RETENTION_DAYS={{ pg_backup_retention_days | default(7) }}
WAL_RETENTION_DAYS={{ pg_wal_retention_days | default(3) }}

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

log "Starting archive cleanup..."

# Cleanup old WAL files
if [ -d "$ARCHIVE_DIR" ]; then
    # Count files before cleanup
    BEFORE_COUNT=$(find "$ARCHIVE_DIR" -type f | wc -l)
    
    # Remove old compressed WAL files
    find "$ARCHIVE_DIR" -name "*.gz" -type f -mtime +$WAL_RETENTION_DAYS -delete 2>/dev/null || true
    
    # Remove old uncompressed WAL files (shouldn't exist, but just in case)
    find "$ARCHIVE_DIR" -type f ! -name "*.gz" -mtime +1 -delete 2>/dev/null || true
    
    # Count files after cleanup
    AFTER_COUNT=$(find "$ARCHIVE_DIR" -type f | wc -l)
    REMOVED=$((BEFORE_COUNT - AFTER_COUNT))
    
    log "Removed $REMOVED old WAL files from archive"
fi

# Cleanup old base backups
if [ -d "$BACKUP_DIR/base" ]; then
    REMOVED_BASES=$(find "$BACKUP_DIR/base" -name "backup_*" -type d -mtime +$RETENTION_DAYS -print -exec rm -rf {} \; 2>/dev/null | wc -l || true)
    log "Removed $REMOVED_BASES old base backups"
fi

# Cleanup old full backups
if [ -d "$BACKUP_DIR/full" ]; then
    REMOVED_FULL=$(find "$BACKUP_DIR/full" -name "full_*" -type d -mtime +$RETENTION_DAYS -print -exec rm -rf {} \; 2>/dev/null | wc -l || true)
    log "Removed $REMOVED_FULL old full backups"
fi

# Check disk space
DISK_USAGE=$(df -h "$BACKUP_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')
log "Backup directory disk usage: ${DISK_USAGE}%"

if [ "$DISK_USAGE" -gt 80 ]; then
    log "WARNING: Disk usage is above 80%"
    
    # More aggressive cleanup if disk space is low
    if [ "$DISK_USAGE" -gt 90 ]; then
        log "CRITICAL: Disk usage above 90%, performing aggressive cleanup"
        # Keep only last 2 days of WAL
        find "$ARCHIVE_DIR" -name "*.gz" -type f -mtime +2 -delete 2>/dev/null || true
        # Keep only last 3 days of backups
        find "$BACKUP_DIR" -type d -name "*_*" -mtime +3 -exec rm -rf {} \; 2>/dev/null || true
    fi
fi

# Report current backup status
if [ -d "$BACKUP_DIR/base/latest" ]; then
    LATEST_BASE=$(readlink "$BACKUP_DIR/base/latest")
    LATEST_AGE=$(find "$BACKUP_DIR/base/latest" -maxdepth 0 -printf '%Ts' | xargs -I{} echo "$(date +%s) - {}" | bc)
    LATEST_HOURS=$((LATEST_AGE / 3600))
    log "Latest base backup: $LATEST_BASE (${LATEST_HOURS} hours old)"
    
    if [ "$LATEST_HOURS" -gt 48 ]; then
        log "WARNING: Latest base backup is more than 48 hours old"
    fi
fi

# Rotate log file if it gets too large
if [ -f "$LOG_FILE" ]; then
    LOG_SIZE=$(du -m "$LOG_FILE" | cut -f1)
    if [ "$LOG_SIZE" -gt 100 ]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        gzip "${LOG_FILE}.old"
        log "Log file rotated"
    fi
fi

log "Archive cleanup completed"